#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

zend_version  = nil
zend_app_path = ''
capifony_version = '2.7.1.dev'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  opts.on("-v", "--version", "") do
    puts "capifony v#{capifony_version}"
    exit 0
  end

  opts.on("-p", "--app NAME", "Specify app name (folder) to capify") do |path|
    zend_app_path = path
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to capifony, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to capifony."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

base = ARGV.shift

files = {
  "Capfile" => unindent(<<-FILE),
    load 'deploy' if respond_to?(:namespace) # cap2 differentiator

    require 'capifony_zend'
    load '#{zend_app_path}/config/deploy'
  FILE

  "#{zend_app_path}/config/deploy.rb" => unindent(<<-FILE),
    set :stages,        %w(production accept testing)
    set :default_stage, "testing"
    set :stage_dir,     "app/config"
    require 'capistrano/ext/multistage'


    set :application, "set your application name here"
    set :domain,      "\#{application}.com"
    set :deploy_to,   "/var/www/\#{domain}"
    set :app_path,    "#{zend_app_path}"

    set :app_config_files, {app_path + '/application/configs/application.dist.ini' => app_path + '/application/configs/application.ini'}

    set :user, "ssh-user"
    set :repository, "https://svn.../"

    set :scm,         :subversion
    #set :user, "capistrano"
    set :use_sudo, false
    set :deploy_via, :copy

    set :interactive_mode, true

    # PHP binary to execute
    #set :php_bin,           "/usr/local/zend/bin/php"

    set :model_manager, "doctrine"

    set  :keep_releases,  3

    # Be more verbose by uncommenting the following line
    logger.level = Logger::MAX_LEVEL
  FILE

  "#{zend_app_path}/config/production.rb" => unindent(<<-FILE),
      server 'production.server.com', :app, :web, :primary => true
      set :application_env, 'production'
  FILE

  "#{zend_app_path}/config/accept.rb" => unindent(<<-FILE),
      server 'accept.server.com', :app, :web, :primary => true
      set :application_env, 'accept'
  FILE

  "#{zend_app_path}/config/testing.rb" => unindent(<<-FILE),
      server 'test.server.com', :app, :web, :primary => true
      set :application_env, 'test'
  FILE

}

files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir_p(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] zend #{zend_version.to_s} project capifonied!"
